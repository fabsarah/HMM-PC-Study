%% PLS by condition!
%This script goes through a mean-centred PLS by task (in our case, rest vs.
%control vs. experiment tasks). You can adjust the hard-coded numbers to
%suit your data
%% Getting the overall categories
%this is just the fractional occupancy and switching rate, but you can add
%in anything else!
data = Rest_hmm12;
FO = data.Metrics.FO;
index = data.N_nonempty;
SR = data.Metrics.SR;
subs = 17;%how many participants you have
conds = 3;%how many conditions do you have
Short_FOSR = cell(subs,conds);
%first, we need to average everything together
for p = 1:subs %participant
    tempdata = [FO{p},SR(index{p},p)];
    Short_FOSR{p,1} = nanmean(tempdata((index{p}<=6 | index{p}>=47),:),1);%the index numbers here (6:47) correspond to our numbering scheme...sorry for the irrelevance!
    Short_FOSR{p,2} = nanmean(tempdata((index{p}>=7 & index{p}<=11 | index{p}>=42 & index{p}<=46),:),1);
    Short_FOSR{p,3} = nanmean(tempdata((index{p}>=12 & index{p}<=41),:),1);
end
clear p tempdata tempdex
%% Getting the data into PLS shape

Rest_PLS = cell(1,1);
for c = 1:conds%components
        for p = 1:subs %participants
            temp1 = Short_FOSR{p,c};%temp files
            if c==1
            Rest_PLS{1}(p,:) = reshape(temp1',1,[]);%reshape the original matrix into a 1xn vector
            elseif c==2
            Rest_PLS{1}(p+subs,:) = reshape(temp1',1,[]);
            elseif c==3
            Rest_PLS{1}(p+(subs*2),:) = reshape(temp1',1,[]);
%             elseif c==4 %keep this going with however many conditions you
%             have
%             Rest_PLS{1}(p+54,:) = reshape(temp1',1,[]);
%             elseif c==5
%             Rest_PLS{1}(p+72,:) = reshape(temp1',1,[]);
            end
        end
end
clear c r p temp1 temp2
%% Run the PLS
% here's how to run the PLS without the GUI:
addpath(genpath('pls'))
option.num_perm = 500;
option.num_boot = 100;

r_task = pls_analysis(Rest_PLS, [subs], conds,[option]);
% the first bus stop here is checking the significance on your LVs. You'll
% have LVs equal to the # of your lowest dimension (similar to canonical
% correlation). The significance can be found in r_task>perm_result>sprob.
% Each row is a p value for that LV
%% Plotting Syntax
%get the variables
K = 12;%your original K value
LV = 1;%the LV you want to plot

data = r_task;
x = (data.boot_result.compare_u(:,LV));
x = reshape(x,K+1,1);
z = data.boot_result.orig_usc(:,LV);
yneg = data.boot_result.llusc(:,LV);
ypos = data.boot_result.ulusc(:,LV);
%this will plot the bootstrap coefficient. 

%%
figure
subplot(1,2,1)
imagesc(x)
colorbar
yticks(1:13)
ylabel('State and SR')
title(sprintf('States and SR, LV %d, p = %d',LV,data.perm_result.sprob(LV)),...
    'FontSize',16)%print the LV and p value in the title
%This ^ plots your state-wise FO and SR. The colours will correspond to the
%direction of the bars in the next sub-plot

subplot(1,2,2)
bar(z)
grid on
hold on
errorbar(1:3,z,yneg-z,ypos-z,'.')
ylabel('Design Scores')
xticklabels({'Rest','Control','Experiment'})
xtickangle(45)
xlabel('Condition')
title(sprintf('Latent Variable %d',LV),'FontSize',16)
%here^ the direction of the bars correspond to the colour of the imagesc
%plot above. Things that load in the same direction are correlated. Neat!
hold off

clear x z ypos yneg %make look nice
